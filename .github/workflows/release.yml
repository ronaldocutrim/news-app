name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      pre_release:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: 📋 Get current version
        id: current_version
        run: |
          current=$(node -p "require('./package.json').version")
          echo "current=$current" >> $GITHUB_OUTPUT
          echo "Current version: $current"

      - name: 🔢 Calculate new version
        id: new_version
        run: |
          current="${{ steps.current_version.outputs.current }}"
          IFS='.' read -ra VERSION <<< "$current"
          major=${VERSION[0]}
          minor=${VERSION[1]}
          patch=${VERSION[2]}
          
          case "${{ github.event.inputs.release_type }}" in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="$major.$minor.$patch"
          
          if [ "${{ github.event.inputs.pre_release }}" = "true" ]; then
            new_version="$new_version-beta.$(date +%Y%m%d%H%M%S)"
          fi
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "New version: $new_version"

      - name: 📝 Update package.json
        run: |
          npm version ${{ steps.new_version.outputs.new_version }} --no-git-tag-version
          
      - name: 📝 Update app.json version
        run: |
          node -e "
            const fs = require('fs');
            const appConfig = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            appConfig.expo.version = '${{ steps.new_version.outputs.new_version }}';
            const versionParts = '${{ steps.new_version.outputs.new_version }}'.split('.');
            const versionCode = parseInt(versionParts[0]) * 10000 + parseInt(versionParts[1]) * 100 + parseInt(versionParts[2]);
            appConfig.expo.android = appConfig.expo.android || {};
            appConfig.expo.android.versionCode = versionCode;
            appConfig.expo.ios = appConfig.expo.ios || {};
            appConfig.expo.ios.buildNumber = '${{ steps.new_version.outputs.new_version }}';
            fs.writeFileSync('app.json', JSON.stringify(appConfig, null, 2));
          "

      - name: 📋 Generate changelog
        id: changelog
        run: |
          echo "## 📱 News App v${{ steps.new_version.outputs.new_version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### ✨ What's New" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commits since last tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$last_tag" ]; then
            echo "📝 **Changes since $last_tag:**" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s" $last_tag..HEAD >> RELEASE_NOTES.md
          else
            echo "📝 **Initial release with the following features:**" >> RELEASE_NOTES.md
            echo "- 📰 Top news listing with pull-to-refresh" >> RELEASE_NOTES.md
            echo "- 🔍 Advanced news search with filters" >> RELEASE_NOTES.md
            echo "- 📄 Detailed news view with infinity scroll" >> RELEASE_NOTES.md
            echo "- 🔗 Share and open news articles" >> RELEASE_NOTES.md
            echo "- 🎨 Clean and responsive UI design" >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "### 🏗 Technical Details" >> RELEASE_NOTES.md
          echo "- **Version**: ${{ steps.new_version.outputs.new_version }}" >> RELEASE_NOTES.md
          echo "- **Build Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> RELEASE_NOTES.md
          echo "- **Platforms**: Android, iOS, Web" >> RELEASE_NOTES.md
          echo "- **Release Type**: ${{ github.event.inputs.release_type }}" >> RELEASE_NOTES.md
          
          if [ "${{ github.event.inputs.pre_release }}" = "true" ]; then
            echo "- **Pre-release**: Yes" >> RELEASE_NOTES.md
          fi

      - name: 💾 Commit version changes
        run: |
          git add package.json app.json RELEASE_NOTES.md
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
          git push origin main

      - name: 🏷️ Create Git tag
        run: |
          git tag -a "v${{ steps.new_version.outputs.new_version }}" -m "Release v${{ steps.new_version.outputs.new_version }}"
          git push origin "v${{ steps.new_version.outputs.new_version }}"

      - name: 📢 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          release_name: 📱 News App v${{ steps.new_version.outputs.new_version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ github.event.inputs.pre_release }}

      - name: 🎉 Success notification
        run: |
          echo "🎉 Release v${{ steps.new_version.outputs.new_version }} created successfully!"
          echo "🔗 Check the release at: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.new_version.outputs.new_version }}"